import 'dart:convert';
import 'package:http/http.dart' as http;
import 'models/usuario.dart';
import 'models/pokemon.dart';

class DatabaseHelper {
  static final DatabaseHelper _instance = DatabaseHelper._internal();
  factory DatabaseHelper() => _instance;
  DatabaseHelper._internal();

  // URL base da API Node.js
  static const String _baseUrl = 'http://localhost:3000/api';

  // Headers padr√£o para requisi√ß√µes
  final Map<String, String> _headers = {'Content-Type': 'application/json'};

  String? _token; // Token JWT para autentica√ß√£o

  // Definir token de autentica√ß√£o
  void setToken(String token) {
    _token = token;
  }

  // Obter headers com token se dispon√≠vel
  Map<String, String> _getHeaders() {
    final headers = Map<String, String>.from(_headers);
    if (_token != null) {
      headers['Authorization'] = 'Bearer $_token';
    }
    return headers;
  }

  // Autenticar usu√°rio
  Future<Usuario?> getUser(String email, String senha) async {
    try {
      print('üîê Tentando login com: $email');
      print('üåê URL: $_baseUrl/usuarios/login');

      final response = await http.post(
        Uri.parse('$_baseUrl/usuarios/login'),
        headers: _headers,
        body: jsonEncode({'email': email, 'senha': senha}),
      );

      print('üìä Status Code: ${response.statusCode}');
      print('üìù Response Body: ${response.body}');

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        setToken(data['token']);

        print('‚úÖ Login realizado com sucesso!');
        return Usuario(
          id: data['user']['id'],
          email: data['user']['email'],
          senha: senha,
        );
      } else if (response.statusCode == 401) {
        print('‚ùå Credenciais inv√°lidas');
        return null;
      } else {
        print('‚ùå Erro no servidor: ${response.statusCode}');
        print('üìÑ Detalhes: ${response.body}');
        return null;
      }
    } catch (e) {
      print('üí• Exception ao autenticar usu√°rio: $e');
      print('üîç Tipo da exception: ${e.runtimeType}');

      // Verificar se √© erro de conex√£o
      if (e.toString().contains('Failed host lookup') ||
          e.toString().contains('Connection refused') ||
          e.toString().contains('SocketException')) {
        print('üåê Erro de conex√£o - Verifique se a API est√° rodando');
      }

      return null;
    }
  }

  // Buscar todos os pok√©mons
  Future<List<Pokemon>> getPokemons() async {
    try {
      final response = await http.get(
        Uri.parse('$_baseUrl/pokemons'),
        headers: _getHeaders(),
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        final List<dynamic> pokemonsList = data['pokemons'] ?? data;

        return pokemonsList
            .map(
              (e) => Pokemon(
                id: e['id'] as int,
                nome: e['nome'] as String,
                tipo: e['tipo'] as String,
                imagem: _normalizarCaminhoImagem(e['imagem'] as String),
              ),
            )
            .toList();
      }
      return [];
    } catch (e) {
      print('Erro ao buscar pok√©mons: $e');
      return [];
    }
  }

  // Buscar pok√©mon por ID
  Future<Pokemon?> getPokemon(int id) async {
    try {
      final response = await http.get(
        Uri.parse('$_baseUrl/pokemons/$id'),
        headers: _getHeaders(),
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        return Pokemon(
          id: data['id'] as int,
          nome: data['nome'] as String,
          tipo: data['tipo'] as String,
          imagem: _normalizarCaminhoImagem(data['imagem'] as String),
        );
      }
      return null;
    } catch (e) {
      print('Erro ao buscar pok√©mon: $e');
      return null;
    }
  }

  // Buscar pok√©mons por nome
  Future<List<Pokemon>> searchPokemonsByName(String nome) async {
    try {
      final response = await http.get(
        Uri.parse('$_baseUrl/pokemons/search/$nome'),
        headers: _getHeaders(),
      );

      if (response.statusCode == 200) {
        final List<dynamic> pokemonsList = jsonDecode(response.body);
        return pokemonsList
            .map(
              (e) => Pokemon(
                id: e['id'] as int,
                nome: e['nome'] as String,
                tipo: e['tipo'] as String,
                imagem: _normalizarCaminhoImagem(e['imagem'] as String),
              ),
            )
            .toList();
      }
      return [];
    } catch (e) {
      print('Erro ao buscar pok√©mons por nome: $e');
      return [];
    }
  }

  // Criar novo usu√°rio
  Future<bool> createUser(String email, String senha) async {
    try {
      final response = await http.post(
        Uri.parse('$_baseUrl/usuarios'),
        headers: _headers,
        body: jsonEncode({'email': email, 'senha': senha}),
      );

      return response.statusCode == 201;
    } catch (e) {
      print('Erro ao criar usu√°rio: $e');
      return false;
    }
  }

  // Criar novo pok√©mon
  Future<bool> createPokemon(Pokemon pokemon) async {
    try {
      final response = await http.post(
        Uri.parse('$_baseUrl/pokemons'),
        headers: _getHeaders(),
        body: jsonEncode(pokemon.toMap()),
      );

      return response.statusCode == 201;
    } catch (e) {
      print('Erro ao criar pok√©mon: $e');
      return false;
    }
  }

  // Atualizar pok√©mon
  Future<bool> updatePokemon(Pokemon pokemon) async {
    try {
      final response = await http.put(
        Uri.parse('$_baseUrl/pokemons/${pokemon.id}'),
        headers: _getHeaders(),
        body: jsonEncode(pokemon.toMap()),
      );

      return response.statusCode == 200;
    } catch (e) {
      print('Erro ao atualizar pok√©mon: $e');
      return false;
    }
  }

  // Deletar pok√©mon
  Future<bool> deletePokemon(int id) async {
    try {
      final response = await http.delete(
        Uri.parse('$_baseUrl/pokemons/$id'),
        headers: _getHeaders(),
      );

      return response.statusCode == 200;
    } catch (e) {
      print('Erro ao deletar pok√©mon: $e');
      return false;
    }
  }

  // Sincronizar com servidor (mantido para compatibilidade)
  Future<void> syncToServer() async {
    try {
      // Esta fun√ß√£o agora pode ser usada para sincronizar dados offline
      // ou realizar outras opera√ß√µes de sincroniza√ß√£o se necess√°rio
      print('Sincroniza√ß√£o iniciada...');

      // Como agora trabalhamos diretamente com a API,
      // a sincroniza√ß√£o √© autom√°tica a cada opera√ß√£o
      print('Sincroniza√ß√£o conclu√≠da!');
    } catch (e) {
      print('Erro na sincroniza√ß√£o: $e');
    }
  }

  // M√©todo legado mantido para compatibilidade
  Future<void> syncToMySQL() async {
    await syncToServer();
  }

  // Verificar conectividade com a API
  Future<bool> isApiAvailable() async {
    try {
      print('üîç Testando conectividade com a API...');
      print('üåê URL de teste: http://localhost:3000/health');

      final response = await http
          .get(Uri.parse('http://localhost:3000/health'), headers: _headers)
          .timeout(const Duration(seconds: 10));

      print('üìä Status da API: ${response.statusCode}');
      print('üìù Resposta: ${response.body}');

      if (response.statusCode == 200) {
        print('‚úÖ API est√° funcionando!');
        return true;
      } else {
        print('‚ùå API retornou erro: ${response.statusCode}');
        return false;
      }
    } catch (e) {
      print('üí• Erro ao conectar com a API: $e');
      print('üîç Tipo do erro: ${e.runtimeType}');

      if (e.toString().contains('TimeoutException')) {
        print('‚è∞ Timeout - API pode estar lenta ou n√£o dispon√≠vel');
      } else if (e.toString().contains('Failed host lookup')) {
        print('üåê Erro de DNS - Verifique o IP da API');
      } else if (e.toString().contains('Connection refused')) {
        print('üö´ Conex√£o recusada - API pode n√£o estar rodando');
      }

      return false;
    }
  }

  // Testar login com verifica√ß√£o de conectividade
  Future<Usuario?> testLogin() async {
    print('üß™ Iniciando teste de login...');

    // Primeiro, testar conectividade
    final isConnected = await isApiAvailable();
    if (!isConnected) {
      print('‚ùå N√£o foi poss√≠vel conectar com a API');
      return null;
    }

    // Tentar login com credenciais padr√£o
    return await getUser('fatec@pokemon.com', 'pikachu');
  }

  // Limpar token (logout)
  void clearToken() {
    _token = null;
  }

  // Normalizar caminho da imagem para garantir compatibilidade
  String _normalizarCaminhoImagem(String imagem) {
    // Se j√° tem o caminho completo, retorna como est√°
    if (imagem.startsWith('assets/images/')) {
      return imagem;
    }

    // Se tem apenas o nome do arquivo, adiciona o caminho
    if (!imagem.contains('/')) {
      return 'assets/images/$imagem';
    }

    // Se tem caminho mas n√£o come√ßa com assets/images/, corrige
    if (imagem.contains('/') && !imagem.startsWith('assets/')) {
      final nomeArquivo = imagem.split('/').last;
      return 'assets/images/$nomeArquivo';
    }

    return imagem;
  }
}
